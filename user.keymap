;; User keymap
;; -----------------------------
;; Keymaps are stored as a set of diffs that are merged together together
;; to create the final set of keys. You can modify these diffs to either add
;; or subtract bindings.
;;
;; Like behaviors, keys are bound by tag. When objects with those tags are active
;; the key bindings are live. Keys can be bound to any number of Light Table commands,
;; allowing you the flexibility to execute multiple operations together. To see a list
;; of all the commands you can execute, start typing a word related to the thing you
;; want to do in between the square brackets (e.g. type "editor").

{:+ {:app {"cmd-alt-space" [:show-commandbar-transient]
           "cmd-alt-c" [:show-connect]
           "cmd-shift-f" [:searcher.show]
           "cmd-t" [:workspace.show]
           ;; Konsole - toggle / klear
           "cmd-k" [:toggle-console]
           "cmd-shift-k" [:clear-console]
           ;; Documentation
           "cmd-alt-down" [:editor.doc.toggle]
           "ctrl-cmd-alt-down" [:docs.search.show]
           ;;Tabsets
           "cmd-shift-t" [:tabset.new]
           "ctrl-shift-left" [:tabs.move-prev-tabset]
           "ctrl-shift-right" [:tabs.move-next-tabset]
           "ctrl-alt-cmd-left" [:tabset.prev]
           "ctrl-alt-cmd-right" [:tabset.next]}

     :tabs {"cmd-alt-left" [:tabs.prev]
            "cmd-alt-right" [:tabs.next]}

     :editor {"cmd-i" [:instarepl.toggle-live]
              "alt-w" [:editor.watch.watch-selection]
              "alt-up" [(:emacs.keymap-cmd "Ctrl-Alt-U")]
              "alt-m" [:editor.line-start-smart]
              ;;Eval the parent ( ... )
              "alt-enter" [(:paredit.select.parent "(")
                           :eval-editor-form
                           :paredit.select.clear]
              "alt-w" [:editor.watch.watch-selection]
              "alt-shift-w" [:editor.watch.unwatch]
              "cmd-shift-/" [:toggle-comment-selection]
              }

     :editor.keys.vim.normal {"cmd-d" [:editor.doc.toggle]
                              ;;Select the parent expression, whether that's [], {}, or ()
                              "shift-alt-s" [(:paredit.select.parent "(")]
                              ;;Format the parent ()
                              "alt-s" [(:paredit.select.parent "(")
                                       :smart-indent-selection
                                       :paredit.select.clear]
                              ;;Slurp and Barf, with less ridiculous and more intuitive names
                              ">" [:paredit.grow.right]
                              "<" [:paredit.shrink.right]
                              "alt-shift-," [:paredit.shrink.left]
                              "alt-shift-." [:paredit.grow.left]}
     }}
